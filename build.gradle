import org.gradle.internal.jvm.Jvm

plugins {
    id 'java'
    id 'application'
    id 'c'
}

//mainClassName = 'MainDemo'

repositories {
    mavenCentral()
}

application {
    applicationDefaultJvmArgs = ["-Djava.library.path=" + file("${buildDir}/libs/rdrand/shared").absolutePath]
}

model {
    platforms {
        x64 {
            architecture "x86_64"
        }
    }

    components {
        rdrand(NativeLibrarySpec) {
            targetPlatform "x64"
            binaries.all {
                def jvmHome = Jvm.current().javaHome
                if (targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args '-I', "${jvmHome}/include"
                    cCompiler.args '-I', "${jvmHome}/include/darwin"
                    cCompiler.args '-mmacosx-version-min=10.4'
                    linker.args '-mmacosx-version-min=10.4'
                    //TODO Compile this on a MAC
                } else if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${jvmHome}/include"
                    cCompiler.args '-I', "${jvmHome}/include/linux"
                    cCompiler.args '-Wall'
                    cCompiler.args '-Wextra'
                    cCompiler.args '-D_FILE_OFFSET_BITS=64'
                    cCompiler.args '-Os'
                    cCompiler.args '-fPIE'
                    cCompiler.args '-fPIC'
                    cCompiler.args '-fstack-protector-all'
                    cCompiler.args '-fstack-protector-strong'
                    cCompiler.args '-fstack-clash-protection'
                    cCompiler.args '-D_FORTIFY_SOURCE=2'
                    cCompiler.args '-fexceptions'
                    cCompiler.args '-Wl,-z,now -Wl,-z,relro -Wl,-pie -Wl,-z,defs'
                } else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-I${jvmHome}/include"
                    cCompiler.args "-I${jvmHome}/include/win32"
                    cCompiler.args '/RTC'         // Runtime error checks
                    cCompiler.args '/GS'          // GuardStack
                    cCompiler.args '/DYNAMICBASE' // ASLR
                    cCompiler.args '/guard:cf'    // Control flow guard
                    cCompiler.args '/NXCOMPAT'    // DEP (On by default but to be sure)
                } else if (targetPlatform.operatingSystem.freeBSD) {
                    cCompiler.args '-I', "${jvmHome}/include"
                    cCompiler.args '-I', "${jvmHome}/include/freebsd"
                    //TODO Compile on FreeBSD system and setup secure compiler options
                }
            }
        }
    }
}

classes.dependsOn 'rdrandSharedLibrary'

jar {
    manifest {
        attributes 'Main-Class': 'MainDemo'
    }
}

plugins {
    id("maven-publish")
}
publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/javachaos/jrdrand")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}
