import org.gradle.internal.jvm.Jvm

plugins {
    id 'java-library'
    id 'c'
    id 'application'
    id 'maven-publish'
}

group 'com.github.javachaos'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

application {
    applicationDefaultJvmArgs = ["-Djava.library.path=" + file("${buildDir}/libs/rdrand/shared").absolutePath]
}

model {
    platforms {
        x64 {
            architecture "x86_64"
        }
    }

    components {
        rdrand(NativeLibrarySpec) {
            targetPlatform "x64"
            binaries.all {
                def jvmHome = Jvm.current().javaHome
                if (targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args '-I', "${jvmHome}/include"
                    cCompiler.args '-I', "${jvmHome}/include/darwin"
                    cCompiler.args '-llibc++'
                    cCompiler.args '-lc'
                    cCompiler.args '-O1'
                    cCompiler.args '-fPIE'
                    cCompiler.args '-fPIC'
                    cCompiler.args '-mrdrnd'
                    cCompiler.args '-mrdseed'
                    cCompiler.args '-fsanitize=undefined'
                    cCompiler.args '-mmacosx-version-min=10.9'
                    cCompiler.args '-fstack-protector-all'
                    cCompiler.args '-fstack-protector-strong'
                    cCompiler.args '-fstack-clash-protection'
                    cCompiler.args '-Wl,-z,now -Wl,-z,relro -Wl,-pie -Wl,-z,defs'
                    linker.args '-mmacosx-version-min=10.9'
                    linker.args '-v'
                    //TODO Compile this on a MAC
                } else if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${jvmHome}/include"
                    cCompiler.args '-I', "${jvmHome}/include/linux"
                    cCompiler.args '-Wall'
                    cCompiler.args '-Wextra'
                    cCompiler.args '-D_FILE_OFFSET_BITS=64'
                    cCompiler.args '-O1'
                    cCompiler.args '-fPIE'
                    cCompiler.args '-fPIC'
                    cCompiler.args '-fstack-protector-all'
                    cCompiler.args '-fstack-protector-strong'
                    cCompiler.args '-fstack-clash-protection'
                    cCompiler.args '-D_FORTIFY_SOURCE=2'
                    cCompiler.args '-fexceptions'
                    cCompiler.args '-mrdrnd'
                    cCompiler.args '-mrdseed'
                    cCompiler.args '-Wl,-z,now -Wl,-z,relro -Wl,-pie -Wl,-z,defs'
                    cCompiler.args '-fsanitize-address-use-after-scope'
                } else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-I${jvmHome}/include"
                    cCompiler.args "-I${jvmHome}/include/win32"
                    cCompiler.args '/RTC'         // Runtime error checks
                    cCompiler.args '/GS'          // GuardStack
                    cCompiler.args '/DYNAMICBASE' // ASLR
                    cCompiler.args '/guard:cf'    // Control flow guard
                    cCompiler.args '/NXCOMPAT'    // DEP (On by default but to be sure)
                } else if (targetPlatform.operatingSystem.freeBSD) {
                    cCompiler.args '-I', "${jvmHome}/include"
                    clibrdrandCompiler.args '-I', "${jvmHome}/include/freebsd"
                    //TODO Compile on FreeBSD system and setup secure compiler options
                }
            }
        }
    }
}

classes.dependsOn 'rdrandSharedLibrary'

jar {
    manifest {
        attributes 'Main-Class': 'com.github.javachaos.jrdrand.main.MainDemo'
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/javachaos/jrdrand")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'jrdrand'
            from components.java
            pom {
                name = 'jRdRand'
                description = 'A simple RDRAND and RDSEED library for java.'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/javachaos/jrdrand/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'javachaos'
                        name = 'Alfred Laderoute'
                        email = 'alfred_e@outlook.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/javachaos/jrdrand.git'
                    developerConnection = 'scm:git:ssh@github.com:javachaos/jrdrand.git'
                    url = 'https://github.com/javachaos/jrdrand/'
                }
            }
        }
    }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
